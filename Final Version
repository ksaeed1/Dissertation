import pygame
import os
import random
import csv
import sys
import arabic_reshaper
from bidi.algorithm import get_display
import json
import sqlite3
from babel.dates import format_date, format_time
from datetime import datetime

pygame.init()
pygame.mixer.init()

SCREEN_WIDTH = 800
SCREEN_HEIGHT = int(SCREEN_WIDTH * 0.8)

screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))

pygame.display.set_caption('Shooter')

#set framerate
clock = pygame.time.Clock()
FPS = 60

#define game variables
GRAVITY = 0.75
SCROLL_THRESH = 200
ROWS = 16
COLS = 150
TILE_SIZE = SCREEN_HEIGHT // ROWS
TILE_TYPES = 21
screen_scroll = 0
bg_scroll = 0
level = 1
MENU = "menu"
PLAYING = "playing"
game_state = MENU  #start in the menu
start_game = False
start_intro = False
LEADERBOARD = "leaderboard"
start_time = pygame.time.get_ticks()
level_complete = False

#define player action variables
moving_left = False
moving_right = False
shoot = False

pygame.mixer.music.load('audio/arabic_desert.mp3')
pygame.mixer.music.set_volume(0.3)
pygame.mixer.music.play(-1, 0.0, 5000)
jump_fx = pygame.mixer.Sound('audio/jump.mp3')
jump_fx.set_volume(0.4)
shot_fx = pygame.mixer.Sound('audio/gunshot.mp3')
shot_fx.set_volume(0.9)

#load images
pine1_img = pygame.image.load('img/background/pine1.png').convert_alpha() 
ground_img = pygame.image.load('img/background/ground.png').convert_alpha() 
desert_img = pygame.image.load('img/background/desert.png').convert_alpha() 
sky_cloud_img = pygame.image.load('img/background/sky_cloud.png').convert_alpha() 

# Load the background image
main_menu_bg = pygame.image.load('img/background/main_menu_bg.png').convert_alpha()
main_menu_bg = pygame.transform.scale(main_menu_bg, (SCREEN_WIDTH, SCREEN_HEIGHT))

#load and resize the exit door image
exit_door_img = pygame.image.load('img/icons/exit_door.png').convert_alpha()
exit_door_img = pygame.transform.scale(exit_door_img, (50, 50))  
exit_door_rect = exit_door_img.get_rect(topleft=(10, 10))  

#leaderboard bg image
leaderboard_bg = pygame.image.load('img/background/leaderboard_bg.png').convert_alpha()
leaderboard_bg = pygame.transform.scale(leaderboard_bg, (SCREEN_WIDTH, SCREEN_HEIGHT))

#store tiles in a list
img_list = []
for x in range(TILE_TYPES):
	img = pygame.image.load(f'img/Tile/{x}.png')
	img = pygame.transform.scale(img, (TILE_SIZE, TILE_SIZE))
	img_list.append(img)
#bullet
bullet_img = pygame.image.load('img/icons/bullet.png').convert_alpha() 
#pickupboxes 
health_box_img = pygame.image.load('img/icons/health_box.png').convert_alpha() 
ammo_box_img = pygame.image.load('img/icons/ammo_box.png').convert_alpha() 
item_boxes = {
	'Health'	: health_box_img,
	'Ammo'		: ammo_box_img
}


#define colours
BG = (135,206,250)
RED = (255, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
BLACK = (0, 0 , 0)
BUTTON_COLOR = (210, 180, 140)
HOVER_COLOR = (190, 160, 120)
PINK = (235, 65, 54)

#column positions
RANK_COLUMN_X = 50  
NAME_COLUMN_X = 100 
SCORE_COLUMN_X = 325 
TIMESTAMP_COLUMN_X = 500 

#define font 
font = pygame.font.Font(None, 32)
font_path = "Amiri-Regular.ttf"
font_size = 28
font = pygame.font.Font(font_path, font_size)
title_font = pygame.font.Font("Amiri-Regular.ttf", 36)
entry_font = pygame.font.Font("Amiri-Regular.ttf", 28) 


class Button:
    def __init__(self, text, x, y, width, height, color, hover_color, action=None, is_arabic=False):
        self.text = text
        self.rect = pygame.Rect(x, y, width, height)
        self.color = color
        self.hover_color = hover_color
        self.action = action
        self.is_arabic = is_arabic

    def draw(self, screen):
        mouse_pos = pygame.mouse.get_pos()
        pygame.draw.rect(screen, self.hover_color if self.rect.collidepoint(mouse_pos) else self.color, self.rect)
        
        if self.is_arabic:
            #reshape and align Arabic text
            reshaped_text = arabic_reshaper.reshape(self.text)
            bidi_text = get_display(reshaped_text)
            text_surface = font.render(bidi_text, True, (255,255,255)) 
            text_rect = text_surface.get_rect()
            text_rect.right = self.rect.right - 10 
            text_rect.centery = self.rect.centery + 5 
        else:
            #align english text
            text_surface = font.render(self.text, True, (255,255,255)) 
            text_rect = text_surface.get_rect(center=self.rect.center)

        screen.blit(text_surface, text_rect)

    def is_clicked(self, event):
        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1: 
            if self.rect.collidepoint(event.pos):
                if self.action:
                    self.action()

def load_translations(language):
    try:
        with open(f"{language}.json", "r", encoding="utf-8") as file:
            translations = json.load(file)
        return translations
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        return {}

#load translations
current_language = "en"  #CHANGE HERE TO DEFAULT TO EN OR AR WHEN GAME OPENS 
translations = load_translations(current_language)
is_arabic_layout = (current_language == "ar")

#reshape and display Arabic text
def render_arabic_text(text, x, y, align="left"):
    reshaped_text = arabic_reshaper.reshape(text)  
    bidi_text = get_display(reshaped_text)  
    text_surface = font.render(bidi_text, True, WHITE)  
    
    if align == "right":
        x -= text_surface.get_width() 
    elif align == "center":
        x -= text_surface.get_width() // 2 
    
    screen.blit(text_surface, (x, y))

def convert_to_arabic_numeral(number):
    arabic_numerals = "٠١٢٣٤٥٦٧٨٩"
    return "".join(arabic_numerals[int(digit)] for digit in str(number))


def format_timestamp_for_language(timestamp, language="en"):
    if timestamp is None:
        return "No timestamp"
    
    if isinstance(timestamp, str):
        try:
            timestamp = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
        except ValueError:
            try:
                timestamp = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S.%f")
            except ValueError:
                return "Invalid date"
    
    #format for Arabic
    if language == "ar":
        try:#try if Babel fails
            day = convert_to_arabic_numeral(timestamp.day)
            month = convert_to_arabic_numeral(timestamp.month)
            year = convert_to_arabic_numeral(timestamp.year)
            hour = convert_to_arabic_numeral(timestamp.hour)
            minute = convert_to_arabic_numeral(timestamp.minute)
            return f"{day}/{month}/{year} {hour}:{minute}"
        except:
            return timestamp.strftime("%d/%m/%Y %H:%M")
    
    #format for English
    return timestamp.strftime("%d/%m/%Y %I:%M %p")


class DropdownMenu:
    def __init__(self, x, y, width, height, options, default_option=0):
        self.rect = pygame.Rect(x, y, width, height)
        self.options = options  #define the available en and ar options
        self.selected_option = default_option #keeps track of the selected language. when  user clicks then option toggles between en and ar
        self.is_open = False
        self.font = pygame.font.Font(font_path, 28)
        self.color = BUTTON_COLOR
        self.hover_color = HOVER_COLOR

    def draw(self, screen):
        #draw main button
        pygame.draw.rect(screen, self.hover_color if self.is_open else self.color, self.rect)
        
        #render current language
        current_text = self.options[self.selected_option]
        text_surface = self.font.render(current_text, True, WHITE)
        text_rect = text_surface.get_rect(center=self.rect.center)
        screen.blit(text_surface, text_rect)

        if self.is_open:
            other_option = 1 - self.selected_option
            option_rect = pygame.Rect(
                self.rect.x, 
                self.rect.y + self.rect.height,  
                self.rect.width, 
                self.rect.height
            )

            pygame.draw.rect(
                screen, 
                self.hover_color if option_rect.collidepoint(pygame.mouse.get_pos()) else self.color, 
                option_rect
            )
            
            other_text = self.options[other_option]
            text_surface = self.font.render(other_text, True, WHITE)
            text_rect = text_surface.get_rect(center=option_rect.center)
            screen.blit(text_surface, text_rect)

    def handle_event(self, event):
        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                self.is_open = not self.is_open
            elif self.is_open:
                other_option = 1 - self.selected_option
                option_rect = pygame.Rect(
                    self.rect.x,
                    self.rect.y + self.rect.height,
                    self.rect.width,
                    self.rect.height
                )
                if option_rect.collidepoint(event.pos):
                    self.selected_option = other_option
                    self.is_open = False
                    return self.options[other_option]
        return None

def draw_ammo(player, is_arabic_layout=False):
    ammo_text = translations.get("ammo", "AMMO")

    if is_arabic_layout:
        #arabic layout: ammo on the top right
        text_x = SCREEN_WIDTH - 30 
        bullet_start_x = SCREEN_WIDTH - 105 - (player.ammo * 10)  #adjust bullet position

        #render Arabic text
        render_arabic_text(ammo_text, text_x, 40, align="right") 
    else:
        #english layout
        text_x = 10 
        bullet_start_x = 110 

        draw_text(f'{ammo_text}: ', font, WHITE, text_x, 35)

    for x in range(player.ammo):
        screen.blit(bullet_img, (bullet_start_x + (x * 10), 60))

def draw_text(text, font, text_col, x, y):
	img = font.render(text, True, text_col)
	screen.blit(img, (x, y))

def draw_bg():
	screen.fill(BG)
	screen.blit(sky_cloud_img, (0,0))
	screen.blit(desert_img, (0, SCREEN_HEIGHT - desert_img.get_height() - 125))
	screen.blit(ground_img, (0, SCREEN_HEIGHT - ground_img.get_height() - 15))

#actions for each button
def start_game():
    global game_state
    game_state = PLAYING  #change state to start the game

def quit_game():
    pygame.quit()
    sys.exit()

def reset_level():
    #reset the level data to its initial state.
    world_data = []
    for row in range(ROWS):
        r = [-1] * COLS  #create a row of -1 (empty tiles)
        world_data.append(r)
    return world_data

def restart_game():
    global game_state, player, health_bar, enemy_group, bullet_group, item_box_group, decoration_group, water_group, exit_group, world_data, world

    #reset game state
    game_state = PLAYING 
    player.alive = True  

    #reset all game variables (enemies, items, etc.)
    enemy_group.empty()
    bullet_group.empty()
    item_box_group.empty()
    decoration_group.empty()
    water_group.empty()
    exit_group.empty()

    #load new level data
    world_data = reset_level()  #reset level data
    with open(f'level{level}_data.csv', newline='') as csvfile:
        reader = csv.reader(csvfile, delimiter=',')
        for x, row in enumerate(reader):
            for y, tile in enumerate(row):
                world_data[x][y] = int(tile)

    #reinitialise world and player with new data
    world = World()
    player, health_bar = world.process_data(world_data)

    #ensure the groups are populated again
    for y, row in enumerate(world_data):
        for x, tile in enumerate(row):
            if tile == 16:  
                enemy = Soldier(x * TILE_SIZE, y * TILE_SIZE, 0.3, 'enemy', 2, 20)
                enemy_group.add(enemy)
            elif tile == 17: 
                item_box = ItemBox('Ammo', x * TILE_SIZE, y * TILE_SIZE)
                item_box_group.add(item_box)
            elif tile == 18: 
                item_box = ItemBox('Health', x * TILE_SIZE, y * TILE_SIZE)
                item_box_group.add(item_box)
            elif tile == 11 or tile == 12 or tile == 13 or tile == 14: 
                decoration = Decoration(img_list[tile], x * TILE_SIZE, y * TILE_SIZE)
                decoration_group.add(decoration)
            elif tile == 9 or tile == 10: 
                water = Water(img_list[tile], x * TILE_SIZE, y * TILE_SIZE)
                water_group.add(water)
            elif tile == 20: 
                exit = Exit(img_list[tile], x * TILE_SIZE, y * TILE_SIZE)
                exit_group.add(exit)

    death_fade.fade_counter = 0  #reset fade counter after restart

def get_username():
    global user_text, active

    input_box = pygame.Rect(250, 250, 300, 50)  #inpput box position and size
    color_inactive = pygame.Color(BUTTON_COLOR)
    color_active = pygame.Color(HOVER_COLOR)
    color = color_inactive
    active = False
    user_text = ''
    done = False

    while not done:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if input_box.collidepoint(event.pos):
                    active = not active
                else:
                    active = False
                color = color_active if active else color_inactive
            if event.type == pygame.KEYDOWN:
                if active:
                    if event.key == pygame.K_RETURN:
                        done = True  
                    elif event.key == pygame.K_BACKSPACE:
                        user_text = user_text[:-1]  
                    else:
                        user_text += event.unicode 

        screen.fill(BLACK)

            #render the input prompt
        if current_language == "ar":
                arabic_text = "أدخل اسمك:"
                text_width, _ = font.size(arabic_text)
                render_arabic_text(arabic_text, screen.get_width() - text_width - 250, 200)  # "Enter your name" in Arabic
        else:
                draw_text("Enter your name:", font, WHITE, 250, 200)

        pygame.draw.rect(screen, color, input_box, 2)

        if current_language == "ar":
                text_width, _ = font.size(user_text)
                render_arabic_text(user_text, input_box.x + input_box.width - text_width - 10, input_box.y + 10)
        else:
                draw_text(user_text, font, WHITE, input_box.x + 10, input_box.y + 10)

        pygame.display.flip()

    return user_text

def show_welcome_message(player_name):
    welcome_message = f"مرحباً، {player_name}!" if current_language == "ar" else f"Welcome, {player_name}!"
    timer = pygame.time.get_ticks() + 1000  #change how long message displays here

    while pygame.time.get_ticks() < timer:
        screen.fill(BLACK)
        if current_language == "ar":
            render_arabic_text(welcome_message, SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT // 2)
        else:
            draw_text(welcome_message, font, WHITE, SCREEN_WIDTH // 2 - 100, SCREEN_HEIGHT // 2)
        pygame.display.flip()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

class Soldier(pygame.sprite.Sprite):
    def __init__(self, x, y, scale,char_type, speed, ammo):
        pygame.sprite.Sprite.__init__(self)
        self.alive = True
        self.char_type = char_type
        self.speed = speed
        self.ammo = ammo
        self.start_ammo = ammo
        self.shoot_cooldown = 0
        self.health = 100
        self.max_health = self.health
        self.direction = 1
        self.vel_y = 0
        self.jump = False
        self.in_air = True
        self.flip = False
        self.animation_list = []
        self.frame_index = 0
        self.action = 0
        self.update_time = pygame.time.get_ticks()
        self.score = 0
        #create ai specific variables
        self.move_counter = 0
        self.vision = pygame.Rect(0, 0, 150, 20)
        self.idling = False
        self.idling_counter = 0

        #load all images for players
        animation_types = ['Idle', 'Run', 'Jump', 'Death']
        for animation in animation_types:

            #reset temporary list of images
            temp_list = []
            #count number of files in the folder
            num_of_frames = len(os.listdir(f'img/{self.char_type}/{animation}'))
            for i in range(num_of_frames):
                img = pygame.image.load(f'img/{self.char_type}/{animation}/{i}.png'). convert_alpha()
                img = pygame.transform.scale(img, (int(img.get_width() * scale), int(img.get_height() * scale)))
                temp_list.append(img)
            self.animation_list.append(temp_list)

        self.image = self.animation_list[self.action][self.frame_index]
        self.rect = self.image.get_rect() #controlls positions and collisions
        self.rect.center = (x, y)
        self.width = self.image.get_width()
        self.height = self.image.get_height()

    def update(self):
        self.update_animation()
        self.check_alive()
        #update cooldown
        if self.shoot_cooldown > 0:
            self.shoot_cooldown -= 1

    def move(self, moving_left, moving_right):
        #reset movement variables
        screen_scroll = 0
        dx = 0
        dy = 0

        #assign moving variables if moving left or right
        if moving_left:
            dx = -self.speed
            self.flip = True
            self.direction = -1
        if moving_right:
            dx = self.speed
            self.flip = False
            self.direction = 1

        #jump
        if self.jump and not self.in_air:
            self.vel_y = -12
            self.jump = False
            self.in_air = True

        #apply gravity
        self.vel_y += GRAVITY
        if self.vel_y > 10:
            self.vel_y = 10
        dy += self.vel_y

        #check for collision with obstacles
        for tile in world.obstacle_list:
            if tile[1].colliderect(self.rect.x + dx, self.rect.y, self.width, self.height):
                dx = 0
            if tile[1].colliderect(self.rect.x, self.rect.y + dy, self.width, self.height):
                if self.vel_y < 0:
                    self.vel_y = 0
                    dy = tile[1].bottom - self.rect.top
                elif self.vel_y >= 0:
                    self.vel_y = 0
                    self.in_air = False
                    dy = tile[1].top - self.rect.bottom

        #update rectangle position
        self.rect.x += dx
        self.rect.y += dy

        #check for collision with water
        if pygame.sprite.spritecollide(self, water_group, False):
            self.health = 0 

        #check if player has fallen off the map
        if self.rect.bottom > SCREEN_HEIGHT:
            self.health = 0 

        #check if player has reached end of level
        if pygame.sprite.spritecollide(self, exit_group, False):
            global level_complete
            level_complete = True  

        #update scroll based on player position
        if self.char_type == 'player':
            if self.rect.right > SCREEN_WIDTH - SCROLL_THRESH or self.rect.left < SCROLL_THRESH:
                self.rect.x -= dx
                screen_scroll = -dx

        return screen_scroll

    def shoot(self):
        if self.shoot_cooldown == 0 and self.ammo > 0:
            self.shoot_cooldown = 20
            bullet = Bullet(
                self.rect.centerx + (0.75 * self.rect.size[0] * self.direction),
                self.rect.centery,
                self.direction,
                "player" if self.char_type == "player" else "enemy",
            )
            bullet_group.add(bullet)
            self.ammo -= 1
            shot_fx.play()


    def ai(self):
        if self.alive and player.alive:
            if self.idling == False and random.randint(1, 200) == 1:
                self.update_action(0) #0 is idle
                self.idling = True
                self.idling_counter = 50
                #check if the ai is near the player
            if self.vision.colliderect(player.rect):
                #stop running and face the player
                self.update_action(0) #0 is idle
                #shoot
                self.shoot()
            else:
                if self.idling == False:
                    if self.direction == 1:
                        ai_moving_right = True
                    else:
                        ai_moving_right = False
                    ai_moving_left = not ai_moving_right
                    self.move(ai_moving_left, ai_moving_right)
                    self.update_action(1) #1 to run
                    self.move_counter += 1
                    #update ai vision as enemy moves
                    self.vision.center = (self.rect.centerx + 75 * self.direction, self.rect.centery)
                    

                    if self.move_counter > TILE_SIZE:
                        self.direction *= -1
                        self.move_counter *= -1
                else:
                    self.idling_counter -= 1
                    if self.idling_counter <= 0: 
                            self.idling = False


        #scroll
        self.rect.x += screen_scroll

    def update_animation(self):
        #update the animation
        ANIMATION_COOLDOWN = 100
        #update image depending on current frame
        self.image = self.animation_list[self.action][self.frame_index]
        #check if enough time has passed since the last update
        if pygame.time.get_ticks() - self.update_time > ANIMATION_COOLDOWN:
            self.update_time = pygame.time.get_ticks()
            self.frame_index += 1
        #if animation has run out, then reset back to the start
        if self.frame_index >= len(self.animation_list[self.action]):
            if self.action == 3:
                self.frame_index = len(self.animation_list[self.action]) - 1
            else:
                self.frame_index = 0 


    def update_action(self, new_action):
        #check if the new action is different to the previous one
        if new_action != self.action:
            self.action = new_action
            #update the animation settings
            self.frame_index = 0 
            self.update_time = pygame.time.get_ticks()


    def check_alive(self):
        if self.health <= 0:
            self.health = 0
            self.speed = 0
            self.alive = False
            self.update_action(3)
            if self.char_type == "player":
                save_score(player_name, self.score, current_language)


    def draw(self):
        screen.blit(pygame.transform.flip(self.image, self.flip, False), self.rect)

class World():
    def __init__(self):
        self.obstacle_list = []

    def process_data(self, data):
        #iterate through each value in level data file
        for y, row in enumerate(data):
            for x, tile in enumerate(row):
                if tile >= 0:
                    img = img_list[tile]
                    img_rect = img.get_rect()
                    img_rect.x = x * TILE_SIZE
                    img_rect.y = y * TILE_SIZE
                    tile_data = (img, img_rect)  
                    if tile >= 0 and tile <= 8:
                        self.obstacle_list.append(tile_data)
                    elif tile >= 9 and tile <= 10:
                        water = Water(img, x * TILE_SIZE, y * TILE_SIZE)
                        water_group.add(water)
                    elif tile >= 11 and tile <= 14:
                        decoration = Decoration(img, x * TILE_SIZE, y * TILE_SIZE)
                        decoration_group.add(decoration)
                    elif tile == 15:  #create player
                        player = Soldier(x * TILE_SIZE, y * TILE_SIZE, 0.3, 'player', 5, 20)
                        health_bar = HealthBar(10, 10, player.health, player.health)
                    elif tile == 16:  #create enemy
                        enemy = Soldier(x * TILE_SIZE, y * TILE_SIZE, 0.3, 'enemy', 2, 20)
                        enemy_group.add(enemy)
                    elif tile == 17:  #create ammo box
                        item_box = ItemBox('Ammo', x * TILE_SIZE, y * TILE_SIZE)
                        item_box_group.add(item_box)
                    elif tile == 18:
                        item_box = ItemBox('Ammo', x * TILE_SIZE, y * TILE_SIZE)
                        item_box_group.add(item_box)
                    elif tile == 19:
                        item_box = ItemBox('Health', x * TILE_SIZE, y * TILE_SIZE)
                        item_box_group.add(item_box)
                    elif tile == 20:  #create exit
                        exit = Exit(img, x * TILE_SIZE, y * TILE_SIZE)
                        exit_group.add(exit)

        return player, health_bar

    def draw(self, screen_scroll):
        for tile in self.obstacle_list:
            tile[1].x += screen_scroll  
            screen.blit(tile[0], tile[1])  

class Decoration(pygame.sprite.Sprite):
	def __init__(self, img, x, y):
		pygame.sprite.Sprite.__init__(self)
		self.image = img
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

	def update(self):
		self.rect.x += screen_scroll

class Water(pygame.sprite.Sprite):
	def __init__(self, img, x, y):
		pygame.sprite.Sprite.__init__(self)
		self.image = img
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

	def update(self):
		self.rect.x += screen_scroll

class Exit(pygame.sprite.Sprite):
	def __init__(self, img, x, y):
		pygame.sprite.Sprite.__init__(self)
		self.image = img
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

	def update(self):
		self.rect.x += screen_scroll

class ItemBox(pygame.sprite.Sprite):
    def __init__(self, item_type, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.item_type = item_type
        self.image = item_boxes[self.item_type] 
        self.rect = self.image.get_rect()
        self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

    def update(self):
        self.rect.x += screen_scroll
        #check if the player has picked up the box
        if pygame.sprite.collide_rect(self, player):
            #check what kind of box it was
            if self.item_type == 'Health':
                player.health += 25
                if player.health > player.max_health:
                    player.health = player.max_health
            elif self.item_type == 'Ammo':
                player.ammo += 15
            self.kill()

class HealthBar:
    def __init__(self, x, y, health, max_health):
        self.x = x
        self.y = y
        self.health = health
        self.max_health = max_health

    def draw(self, health, is_arabic_layout=False):

        self.health = health
        ratio = self.health / self.max_health

        #position for arabic 
        if is_arabic_layout:
            self.x = SCREEN_WIDTH - 160 
        else:
            self.x = 10  #top left for English

        pygame.draw.rect(screen, BLACK, (self.x - 2, self.y - 2, 154, 24))
        pygame.draw.rect(screen, RED, (self.x, self.y, 150, 20))
        pygame.draw.rect(screen, GREEN, (self.x, self.y, 150 * ratio, 20))

class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y, direction, owner):
        pygame.sprite.Sprite.__init__(self)
        self.speed = 10
        self.image = bullet_img  
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.direction = direction
        self.owner = owner  #track who fired the bullet (player or enemy)

    def update(self):
        #move the bullet
        self.rect.x += (self.direction * self.speed) + screen_scroll

        #check if the bullet has gone off screen
        if self.rect.right < 0 or self.rect.left > SCREEN_WIDTH:
            self.kill()

        #check collision with level
        for tile in world.obstacle_list:
            if tile[1].colliderect(self.rect):
                self.kill()

        #check collision with characters
        if self.owner == "player":
            #bullet fired by player should not hit the player
            for enemy in enemy_group:
                if pygame.sprite.collide_rect(self, enemy) and enemy.alive:
                    enemy.health -= 25
                    self.kill()
        elif self.owner == "enemy":
            #bullet fired by enemy should not hit other enemies
            if pygame.sprite.collide_rect(self, player) and player.alive:
                player.health -= 2
                self.kill()

class ScreenFade():
	def __init__(self, direction, colour, speed):
		self.direction = direction
		self.colour = colour
		self.speed = speed 
		self.fade_counter = 0 

	def fade(self):
		fade_complete = False
		self.fade_counter += self.speed
		if self.direction == 1: #whole screen fade
			pygame.draw.rect(screen, self.colour, (0 - self.fade_counter, 0, SCREEN_WIDTH // 2, SCREEN_HEIGHT))
			pygame.draw.rect(screen, self.colour, (SCREEN_WIDTH // 2 + self.fade_counter, 0, SCREEN_WIDTH, SCREEN_HEIGHT))
			pygame.draw.rect(screen, self.colour, (0, 0 - self.fade_counter, SCREEN_WIDTH, SCREEN_HEIGHT // 2))
			pygame.draw.rect(screen, self.colour, (0, SCREEN_HEIGHT // 2 + self.fade_counter, SCREEN_WIDTH, SCREEN_HEIGHT))

		if self.direction == 2: #vertical screen fade down
			pygame.draw.rect(screen, self.colour, (0, 0, SCREEN_WIDTH, 0 + self.fade_counter))
		if self.fade_counter >= SCREEN_WIDTH:
			fade_complete = True

		return fade_complete
			
#create screen Fades
intro_fade = ScreenFade(1, (139, 0, 0), 4)
death_fade = ScreenFade(2, (139, 0, 0), 4)

def switch_to_leaderboard():
    global game_state
    game_state = "LEADERBOARD"

def switch_to_menu():
    global game_state
    game_state = "MENU"

def connect_to_database():
    try:
        conn = sqlite3.connect('game_leaderboard.db')
        conn.execute("PRAGMA journal_mode=WAL") 
        return conn
    except sqlite3.Error as err:
        print(f"Database connection error: {err}")
        return None

def init_database():
    try:
        with connect_to_database() as conn:
            conn.execute("""
            CREATE TABLE IF NOT EXISTS scores (
                player_name TEXT PRIMARY KEY,
                score INTEGER NOT NULL,
                language TEXT NOT NULL,
                timestamp TEXT NOT NULL
            )
            """)
    except Exception as e:
        print(f"Database initialisation failed: {e}")

init_database()

def save_score(player_name, score, language):
    try:
        with connect_to_database() as conn:
            cursor = conn.cursor()
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            cursor.execute("SELECT score FROM scores WHERE player_name = ?", (player_name,))
            existing = cursor.fetchone()
            
            if existing:
                if score > existing[0]:
                    cursor.execute("""
                        UPDATE scores 
                        SET score = ?, timestamp = ?, language = ?
                        WHERE player_name = ?
                    """, (score, timestamp, language, player_name))
            else:
                cursor.execute("""
                    INSERT INTO scores (player_name, score, language, timestamp)
                    VALUES (?, ?, ?, ?)
                """, (player_name, score, language, timestamp))
            
            conn.commit()
        
        return True
    except Exception as e:
        print(f"Error saving score: {e}")
        return False

def get_leaderboard_data(limit=5):
    try:
        with connect_to_database() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT player_name, score, timestamp 
                FROM scores 
                ORDER BY score DESC 
                LIMIT ?
            """, (limit,))
            return cursor.fetchall()
    except Exception as e:
        print(f"Error fetching leaderboard: {e}")
        return []

def display_leaderboard(screen):
    screen.blit(leaderboard_bg, (0, 0))
    
    is_rtl = (current_language == "ar")
    
    title_text = translations.get("leaderboard", "Leaderboard")
    if is_rtl:
        reshaped_title = arabic_reshaper.reshape(title_text)
        bidi_title = get_display(reshaped_title)
        title_surface = title_font.render(bidi_title, True, (0, 0, 0))
    else:
        title_surface = title_font.render(title_text, True, (0, 0, 0))
    title_rect = title_surface.get_rect(center=(SCREEN_WIDTH//2, 50))
    screen.blit(title_surface, title_rect)

    if is_rtl:
        rank_col = SCREEN_WIDTH - 50
        name_col = SCREEN_WIDTH - 150
        score_col = SCREEN_WIDTH - 300
        time_col = SCREEN_WIDTH - 500
    else:
        rank_col = 50
        name_col = 150
        score_col = 300
        time_col = 500

    headers = [
        translations.get("rank", "Rank"),
        translations.get("name", "Name"), 
        translations.get("score", "Score"),
        translations.get("timestamp", "Date")
    ]
    
    for i, header in enumerate(headers):
        if is_rtl:
            reshaped = arabic_reshaper.reshape(header)
            bidi = get_display(reshaped)
            surf = entry_font.render(bidi, True, (0, 0, 0))
            text_width = surf.get_width()
            if i == 0:  # Rank
                x = rank_col - text_width
            elif i == 1:  # Name
                x = name_col - text_width
            elif i == 2:  # Score
                x = score_col - text_width
            else:  # Date
                x = time_col - text_width
        else:
            surf = entry_font.render(header, True, (0, 0, 0))
            if i == 0:
                x = rank_col
            elif i == 1:
                x = name_col
            elif i == 2:
                x = score_col
            else:
                x = time_col
        screen.blit(surf, (x, 120))

    pygame.draw.line(screen, (0,0,0), (50, 160), (SCREEN_WIDTH-50, 160), 2)

    scores = get_leaderboard_data(limit=5) 
    y = 180
    
    for rank, (name, score, timestamp) in enumerate(scores, 1):
        rank_text = convert_to_arabic_numeral(rank) if is_rtl else str(rank)
        rank_surf = entry_font.render(f"{rank_text}.", True, (0,0,0))
        if is_rtl:
            screen.blit(rank_surf, (rank_col - rank_surf.get_width(), y))
        else:
            screen.blit(rank_surf, (rank_col, y))


        if any('\u0600' <= char <= '\u06FF' for char in name):
            reshaped = arabic_reshaper.reshape(name)
            bidi = get_display(reshaped)
            name_surf = entry_font.render(bidi, True, (0,0,0))
        else:
            name_surf = entry_font.render(name, True, (0,0,0))

        if is_rtl:
            screen.blit(name_surf, (name_col - name_surf.get_width(), y))
        else:
            screen.blit(name_surf, (name_col, y))

        score_text = convert_to_arabic_numeral(score) if is_rtl else str(score)
        score_surf = entry_font.render(score_text, True, (0,0,0))
        if is_rtl:
            screen.blit(score_surf, (score_col - score_surf.get_width(), y))
        else:
            screen.blit(score_surf, (score_col, y))

        time_text = format_timestamp_for_language(timestamp, current_language)
        if is_rtl:
            reshaped = arabic_reshaper.reshape(time_text)
            bidi = get_display(reshaped)
            time_surf = entry_font.render(bidi, True, (0,0,0))
            screen.blit(time_surf, (time_col - time_surf.get_width(), y))
        else:
            time_surf = entry_font.render(time_text, True, (0,0,0))
            screen.blit(time_surf, (time_col, y))

        y += 40

    if is_rtl:
        exit_door_rect.right = SCREEN_WIDTH - 10  
    else:
        exit_door_rect.left = 10  
    screen.blit(exit_door_img, exit_door_rect.topleft)


def show_well_done_screen(player_score):
    screen.fill(BLACK)

    well_done_message = translations.get("well_done", "Well Done!") 

    font = pygame.font.Font(font_path, 74)  
    if current_language == "ar":
        reshaped_message = arabic_reshaper.reshape(well_done_message)
        bidi_message = get_display(reshaped_message)
        text = font.render(bidi_message, True, WHITE)
    else:
        text = font.render(well_done_message, True, WHITE)
    text_rect = text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 - 50))
    screen.blit(text, text_rect)

    your_score_message = translations.get("your_score", "Your Score: {}").format(player_score)

    font = pygame.font.Font(font_path, 48)  
    if current_language == "ar":
        reshaped_score = arabic_reshaper.reshape(your_score_message)
        bidi_score = get_display(reshaped_score)
        score_text = font.render(bidi_score, True, WHITE)
    else:
        score_text = font.render(your_score_message, True, WHITE)
    score_rect = score_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 50))
    screen.blit(score_text, score_rect)

    pygame.display.update()

#create sprite groups
enemy_group = pygame.sprite.Group()
bullet_group = pygame.sprite.Group()
item_box_group = pygame.sprite.Group()
decoration_group = pygame.sprite.Group()
water_group = pygame.sprite.Group()
exit_group = pygame.sprite.Group()

#define button positions and sizes
button_width = 200
button_height = 50
button_x = (SCREEN_WIDTH - button_width) // 2 
button_y_start = (SCREEN_HEIGHT - (button_height * 3 + 20)) // 2  
button_y_quit = button_y_start + button_height + 10
button_y_restart = button_y_quit + button_height + 10  
button_y_leaderboard = button_y_quit + button_height + 10

#create buttons
start_button = Button(
    text=translations.get("start", "Start"),
    x=button_x,
    y=button_y_start,
    width=button_width,
    height=button_height,
    color=BUTTON_COLOR,
    hover_color=HOVER_COLOR,
    action=start_game,
    is_arabic=(current_language == "ar")  
)

quit_button = Button(
    text=translations.get("quit", "Quit"),
    x=button_x,
    y=button_y_quit,
    width=button_width,
    height=button_height,
    color=BUTTON_COLOR,
    hover_color=HOVER_COLOR,
    action=quit_game,
    is_arabic=(current_language == "ar")
)


restart_button = Button(
    text=translations.get("restart", "Restart"), 
    x=button_x, 
    y=button_y_restart,  
    width=button_width, 
    height=button_height, 
    color=BUTTON_COLOR,  
    hover_color=HOVER_COLOR, 
    action=restart_game,  
    is_arabic=(current_language == "ar")  
)

leaderboard_button = Button(
    text=translations.get("leaderboard", "Leaderboard"), 
    x=button_x, 
    y=button_y_leaderboard,  
    width=button_width,  
    height=button_height, 
    color=BUTTON_COLOR, 
    hover_color=HOVER_COLOR, 
    action=switch_to_leaderboard,  
    is_arabic=(current_language == "ar")  
)

language_options = ["EN", "AR"]
language_dropdown = DropdownMenu(
    x=SCREEN_WIDTH - 100, 
    y=20,
    width=80,
    height=40,
    options=language_options,
    default_option=0 if current_language == "en" else 1
)

#create empty tile list
world_data = []
for row in range(ROWS):
	r = [-1] * COLS
	world_data.append(r)
#load level data and create world
with open(f'level{level}_data.csv', newline='') as csvfile:
	reader = csv.reader(csvfile, delimiter=',')
	for x, row in enumerate(reader):
		for y, tile in enumerate (row):
			world_data[x][y] = int(tile)


world = World()
player, health_bar = world.process_data(world_data)

#get the users name before starting the game
player_name = get_username()

#show welcome message before the menu
show_welcome_message(player_name)

start_time = pygame.time.get_ticks()

run = True
while run:
    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        #handle dropdown selection first
        selected_option = language_dropdown.handle_event(event)
        if selected_option:
            new_lang = "en" if selected_option == "EN" else "ar"
            if new_lang != current_language:
                current_language = new_lang
            translations = load_translations(current_language)
            #update button texts
            start_button.text = translations.get("start", "Start")
            start_button.is_arabic = (current_language == "ar")
            quit_button.text = translations.get("quit", "Quit")
            quit_button.is_arabic = (current_language == "ar")
            leaderboard_button.text = translations.get("leaderboard", "Leaderboard")
            leaderboard_button.is_arabic = (current_language == "ar")
            restart_button.text = translations.get("restart", "Restart")
            restart_button.is_arabic = (current_language == "ar")

        #handle menu state (buttons are active only in menu state)
        if game_state == MENU:
            if event.type == pygame.MOUSEBUTTONDOWN:
                if start_button.is_clicked(event):
                    player_name = get_username()
                    show_welcome_message(player_name)
                    game_state = PLAYING
                    start_time = pygame.time.get_ticks()
                    level_complete = False 

                if quit_button.is_clicked(event):
                    pygame.quit()
                    sys.exit()

                if leaderboard_button.is_clicked(event):
                    switch_to_leaderboard()

        #handle in-game actions
        elif game_state == PLAYING:
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_a:
                    moving_left = True
                if event.key == pygame.K_d:
                    moving_right = True
                if event.key == pygame.K_SPACE:
                    shoot = True
                if event.key == pygame.K_w and player.alive:
                    player.jump = True
                    jump_fx.play()
                if event.key == pygame.K_ESCAPE:
                    game_state = MENU

            if event.type == pygame.KEYUP:
                if event.key == pygame.K_a:
                    moving_left = False
                if event.key == pygame.K_d:
                    moving_right = False
                if event.key == pygame.K_SPACE:
                    shoot = False

            #handle restart after death
            if not player.alive and event.type == pygame.MOUSEBUTTONDOWN:
                if restart_button.is_clicked(event):
                    restart_game()
                if quit_button.is_clicked(event):
                    pygame.quit()
                    sys.exit()

        #handle leaderboard state
        elif game_state == "LEADERBOARD":
            if event.type == pygame.MOUSEBUTTONDOWN:
                if exit_door_rect.collidepoint(event.pos):
                    game_state = MENU

    #drawing
    if game_state == MENU:
        screen.blit(main_menu_bg, (0, 0))
        start_button.draw(screen)
        quit_button.draw(screen)
        leaderboard_button.draw(screen)
        language_dropdown.draw(screen) 

    elif game_state == "LEADERBOARD":
        display_leaderboard(screen)
        if current_language == "ar":
            exit_door_rect.right == SCREEN_WIDTH - 10
        else:
            exit_door_rect.left = 10
        screen.blit(exit_door_img, exit_door_rect.topleft)

    elif game_state == PLAYING:
        screen.fill(BLACK)
        clock.tick(FPS)

        #update and draw background
        draw_bg()

        #draw world map
        screen_scroll = player.move(moving_left, moving_right)
        world.draw(screen_scroll)

        #show player health and ammo
        health_bar.draw(player.health, is_arabic_layout=(current_language == "ar"))
        draw_ammo(player, is_arabic_layout=(current_language == "ar"))

        #update and draw player
        player.update()
        player.draw()

        #handle enemies
        for enemy in enemy_group:
            enemy.ai()
            enemy.update()
            enemy.draw()

        #update and draw all groups
        bullet_group.update()
        item_box_group.update()
        decoration_group.update()
        water_group.update()
        exit_group.update()
        bullet_group.draw(screen)
        item_box_group.draw(screen)
        decoration_group.draw(screen)
        water_group.draw(screen)
        exit_group.draw(screen)

        if start_intro:
            if intro_fade.fade():
                start_intro = False
                intro_fade.fade_counter = 0

        #player actions
        if player.alive and not level_complete:  #only update if level not complete
            if shoot:
                player.shoot()
            if player.in_air:
                player.update_action(2)  #jump
            elif moving_left or moving_right:
                player.update_action(1)  #run
            else:
                player.update_action(0)  # idle

            #update score based on time survived 
            current_time = pygame.time.get_ticks()
            time_elapsed = (current_time - start_time) // 1000
            player.score = time_elapsed
        elif not player.alive:
            if death_fade.fade():
                restart_button.draw(screen)
                quit_button.draw(screen)

        #check if level is complete 
        if level_complete and not hasattr(player, 'final_score_saved'):
            player.final_score_saved = True
            final_score = player.score
            save_score(player_name, final_score, current_language)
            show_well_done_screen(final_score)
            
            waiting = True
            while waiting:
                for e in pygame.event.get():
                    if e.type == pygame.QUIT:
                        pygame.quit()
                        sys.exit()
                    if e.type == pygame.KEYDOWN:
                        waiting = False
                pygame.display.update()
                clock.tick(FPS)
            
            restart_game()

    pygame.display.update()

pygame.quit()
