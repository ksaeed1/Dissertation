import pygame
import os
import random
import csv
import sys
import arabic_reshaper
from bidi.algorithm import get_display
import json

pygame.init()
pygame.mixer.init()

SCREEN_WIDTH = 800
SCREEN_HEIGHT = int(SCREEN_WIDTH * 0.8)

screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))

pygame.display.set_caption('Shooter')

#set framerate
clock = pygame.time.Clock()
FPS = 60

#define game variables
GRAVITY = 0.75
SCROLL_THRESH = 200
ROWS = 16
COLS = 150
TILE_SIZE = SCREEN_HEIGHT // ROWS
TILE_TYPES = 21
screen_scroll = 0
bg_scroll = 0
level = 1
MENU = "menu"
PLAYING = "playing"
game_state = MENU  # Start in the menu
start_game = False
start_intro = False

#define player action variables
moving_left = False
moving_right = False
shoot = False

pygame.mixer.music.load('audio/arabic_desert.mp3')
pygame.mixer.music.set_volume(0.3)
pygame.mixer.music.play(-1, 0.0, 5000)
jump_fx = pygame.mixer.Sound('audio/jump.mp3')
jump_fx.set_volume(0.4)
shot_fx = pygame.mixer.Sound('audio/gunshot.mp3')
shot_fx.set_volume(0.9)

#load images
pine1_img = pygame.image.load('img/background/pine1.png').convert_alpha() 
ground_img = pygame.image.load('img/background/ground.png').convert_alpha() 
desert_img = pygame.image.load('img/background/desert.png').convert_alpha() 
sky_cloud_img = pygame.image.load('img/background/sky_cloud.png').convert_alpha() 


#store tiles in a list
img_list = []
for x in range(TILE_TYPES):
	img = pygame.image.load(f'img/Tile/{x}.png')
	img = pygame.transform.scale(img, (TILE_SIZE, TILE_SIZE))
	img_list.append(img)
#bullet
bullet_img = pygame.image.load('img/icons/bullet.png').convert_alpha() 
#pickupboxes 
health_box_img = pygame.image.load('img/icons/health_box.png').convert_alpha() 
ammo_box_img = pygame.image.load('img/icons/ammo_box.png').convert_alpha() 
item_boxes = {
	'Health'	: health_box_img,
	'Ammo'		: ammo_box_img
}


#define colours
BG = (135,206,250)
RED = (255, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
BLACK = (0, 0 , 0)
BUTTON_COLOR = (255, 20, 147)  # Deep pink
HOVER_COLOR = (199, 21, 133)
PINK = (235, 65, 54)

#define font here

font = pygame.font.Font(None, 32)
# Arabic-compatible font
font_path = "Amiri-Regular.ttf"  # Ensure this path is correct
font_size = 28
font = pygame.font.Font(font_path, font_size)

class Button:
    def __init__(self, text, x, y, width, height, color, hover_color, action=None, is_arabic=False):
        self.text = text
        self.rect = pygame.Rect(x, y, width, height)
        self.color = color
        self.hover_color = hover_color
        self.action = action
        self.is_arabic = is_arabic  # Flag to indicate if the text is Arabic

    def draw(self, screen):
        """Draw button and change color on hover"""
        mouse_pos = pygame.mouse.get_pos()
        pygame.draw.rect(screen, self.hover_color if self.rect.collidepoint(mouse_pos) else self.color, self.rect)
        
        if self.is_arabic:
            # Use the render_arabic_text function for Arabic text
            render_arabic_text(self.text, self.rect.x + self.rect.width - 10, self.rect.y + 10, align="right")
        else:
            # Render regular text for non-Arabic (left-aligned)
            text_surf = font.render(self.text, True, WHITE)
            screen.blit(text_surf, (self.rect.x + (self.rect.width - text_surf.get_width()) // 2,
                                      self.rect.y + (self.rect.height - text_surf.get_height()) // 2))

    def is_clicked(self, event):
        """Check if button is clicked and perform action"""
        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:  # Left mouse button
            if self.rect.collidepoint(event.pos):
                if self.action:
                    self.action()

# Function to load translations
def load_translations(language):
    try:
        with open(f"{language}.json", "r", encoding="utf-8") as file:
            translations = json.load(file)
        return translations
    except FileNotFoundError:
        print(f"Error: {language}.json file not found.")
        return {}
    except json.JSONDecodeError:
        print(f"Error: Failed to decode {language}.json. Ensure the JSON is valid.")
        return {}

# Function to reshape and display Arabic text
def render_arabic_text(text, x, y, align="left"):
    reshaped_text = arabic_reshaper.reshape(text)  # Reshape Arabic text
    bidi_text = get_display(reshaped_text)  # Apply BiDi algorithm
    text_surface = font.render(bidi_text, True, WHITE)  # Render the text
    
    # Adjust position based on alignment
    if align == "right":
        x -= text_surface.get_width()  # Right-align the text
    elif align == "center":
        x -= text_surface.get_width() // 2  # Center-align the text
    
    screen.blit(text_surface, (x, y))

# Load translations
current_language = "en"  # Default to Arabic
translations = load_translations(current_language)

def toggle_language():
    global current_language, translations
    # Toggle between Arabic and English
    current_language = "en" if current_language == "ar" else "ar"
    translations = load_translations(current_language)  # Load the new translations
    
    # Update button text and is_arabic flag
    start_button.text = translations.get("start", "Start")
    start_button.is_arabic = (current_language == "ar")
    
    quit_button.text = translations.get("quit", "Quit")
    quit_button.is_arabic = (current_language == "ar")
    
    lang_button.text = translations.get("language", "Language")
    lang_button.is_arabic = (current_language == "ar")


def draw_text(text, font, text_col, x, y):
	img = font.render(text, True, text_col)
	screen.blit(img, (x, y))

def draw_bg():
	screen.fill(BG)
	screen.blit(sky_cloud_img, (0,0))
	screen.blit(desert_img, (0, SCREEN_HEIGHT - desert_img.get_height() - 125))
	screen.blit(ground_img, (0, SCREEN_HEIGHT - ground_img.get_height() - 15))


# Actions for each button
def start_game():
    global game_state
    game_state = PLAYING  # Change state to start the game

def quit_game():
    pygame.quit()
    sys.exit()

def restart_game():
    global world, player, health_bar, game_state, enemy_group, bullet_group, item_box_group, decoration_group, water_group, exit_group
    world = World()
    player, health_bar = world.process_data(world_data)
    
    # Clear all relevant groups before restarting
    enemy_group.empty()
    bullet_group.empty()
    item_box_group.empty()
    decoration_group.empty()
    water_group.empty()
    exit_group.empty()

    # Reinitialize enemies, item boxes, decorations, and other entities based on the world data
    for y, row in enumerate(world_data):
        for x, tile in enumerate(row):
            if tile == 16:  # Enemy tile in the map
                enemy = Soldier(x * TILE_SIZE, y * TILE_SIZE, 0.3, 'enemy', 2, 20)
                enemy_group.add(enemy)
            elif tile == 17:  # Item box tile example
                item_box = ItemBox('Ammo', x * TILE_SIZE, y * TILE_SIZE)
                item_box_group.add(item_box)
            elif tile == 18:  # Health item box tile example
                item_box = ItemBox('Health', x * TILE_SIZE, y * TILE_SIZE)
                item_box_group.add(item_box)
            elif tile == 19:  # Other item box (e.g., Health)
                item_box = ItemBox('Health', x * TILE_SIZE, y * TILE_SIZE)
                item_box_group.add(item_box)
            elif tile == 11 or tile == 12 or tile == 13 or tile == 14:  # Decoration tiles
                decoration = Decoration(img_list[tile], x * TILE_SIZE, y * TILE_SIZE)
                decoration_group.add(decoration)
            elif tile == 9 or tile == 10:  # Water tiles
                water = Water(img_list[tile], x * TILE_SIZE, y * TILE_SIZE)
                water_group.add(water)
            elif tile == 20:  # Exit tile
                exit = Exit(img_list[tile], x * TILE_SIZE, y * TILE_SIZE)
                exit_group.add(exit)

    player.alive = True  # Ensure the player is alive after restart



class Soldier(pygame.sprite.Sprite):
	def __init__(self, x, y, scale,char_type, speed, ammo):
		pygame.sprite.Sprite.__init__(self)
		self.alive = True
		self.char_type = char_type
		self.speed = speed
		self.ammo = ammo
		self.start_ammo = ammo
		self.shoot_cooldown = 0
		self.health = 100
		self.max_health = self.health
		self.direction = 1
		self.vel_y = 0
		self.jump = False
		self.in_air = True
		self.flip = False
		self.animation_list = []
		self.frame_index = 0
		self.action = 0
		self.update_time = pygame.time.get_ticks()
		#create ai specific variables
		self.move_counter = 0
		self.vision = pygame.Rect(0, 0, 150, 20)
		self.idling = False
		self.idling_counter = 0

		#load all images for players
		animation_types = ['Idle', 'Run', 'Jump', 'Death']
		for animation in animation_types:

			#reset temporary list of images
			temp_list = []
			#count number of files in the folder
			num_of_frames = len(os.listdir(f'img/{self.char_type}/{animation}'))
			for i in range(num_of_frames):
				img = pygame.image.load(f'img/{self.char_type}/{animation}/{i}.png'). convert_alpha()
				img = pygame.transform.scale(img, (int(img.get_width() * scale), int(img.get_height() * scale)))
				temp_list.append(img)
			self.animation_list.append(temp_list)

		self.image = self.animation_list[self.action][self.frame_index]
		self.rect = self.image.get_rect() #controlls positions and collisions
		self.rect.center = (x, y)
		self.width = self.image.get_width()
		self.height = self.image.get_height()

	def update(self):
		self.update_animation()
		self.check_alive()
		#update cooldown
		if self.shoot_cooldown > 0:
			self.shoot_cooldown -= 1

	def move(self, moving_left, moving_right):
		#reset movement variables
		screen_scroll = 0
		dx = 0
		dy = 0

		#assign moving variables if moving left or right
		if moving_left:
			dx = -self.speed
			self.flip = True
			self.direction = -1
		if moving_right:
			dx = self.speed
			self.flip = False
			self.direction = 1

		#jump
		if self.jump == True and self.in_air == False:
			self.vel_y = -11
			self.jump = False
			self.in_air = True

		#apply gravity
		self.vel_y += GRAVITY
		if self.vel_y > 10:
			self.vel_y
		dy += self.vel_y

		#check for collision 
		for tile in world.obstacle_list:
			#check collision in the x direction
			if tile[1].colliderect(self.rect.x + dx, self.rect.y, self.width, self.height):
				dx = 0
		#check for collision in the y direction
			if tile[1].colliderect(self.rect.x + dy, self.rect.y, self.width, self.height):
			#check if below the ground, i.e., jumping
				if self.vel_y < 0:
					self.vel_y = 0
					dy = tile[1].bottom - self.rect.top
				#check if above the ground, i.e., falling
				elif self.vel_y >= 0:
					self.vel_y = 0
					self.in_air = False
					dy = tile[1].top - self.rect.bottom


		#update rectangle position
		self.rect.x += dx
		self.rect.y += dy

		#update scroll based on player position
		if self.char_type == 'player':
			if self.rect.right > SCREEN_WIDTH - SCROLL_THRESH or self.rect.left < SCROLL_THRESH:
				self.rect.x -= dx 
				screen_scroll = -dx

		return screen_scroll

	def shoot(self):
	    if self.shoot_cooldown == 0 and self.ammo > 0:
	        self.shoot_cooldown = 20
	        bullet = Bullet(
	            self.rect.centerx + (0.75 * self.rect.size[0] * self.direction),
	            self.rect.centery,
	            self.direction,
	            "player" if self.char_type == "player" else "enemy",
	        )
	        bullet_group.add(bullet)
	        self.ammo -= 1


	def ai(self):
		if self.alive and player.alive:
			if self.idling == False and random.randint(1, 200) == 1:
				self.update_action(0) #0 is idle
				self.idling = True
				self.idling_counter = 50
				#check if the ai is near the player
			if self.vision.colliderect(player.rect):
				#stop running and face the player
				self.update_action(0) #0 is idle
				#shoot
				self.shoot()
			else:
				if self.idling == False:
					if self.direction == 1:
						ai_moving_right = True
					else:
						ai_moving_right = False
					ai_moving_left = not ai_moving_right
					self.move(ai_moving_left, ai_moving_right)
					self.update_action(1) #1 to run
					self.move_counter += 1
					#update ai vision as enemy moves
					self.vision.center = (self.rect.centerx + 75 * self.direction, self.rect.centery)
					

					if self.move_counter > TILE_SIZE:
						self.direction *= -1
						self.move_counter *= -1
				else:
					self.idling_counter -= 1
					if self.idling_counter <= 0: 
							self.idling = False


		#scroll
		self.rect.x += screen_scroll

	def update_animation(self):
		#update the animation
		ANIMATION_COOLDOWN = 100
		#update image depending on current frame
		self.image = self.animation_list[self.action][self.frame_index]
		#check if enough time has passed since the last update
		if pygame.time.get_ticks() - self.update_time > ANIMATION_COOLDOWN:
			self.update_time = pygame.time.get_ticks()
			self.frame_index += 1
		#if animation has run out, then reset back to the start
		if self.frame_index >= len(self.animation_list[self.action]):
			if self.action == 3:
				self.frame_index = len(self.animation_list[self.action]) - 1
			else:
				self.frame_index = 0 


	def update_action(self, new_action):
		#check if the new action is different to the previous one
		if new_action != self.action:
			self.action = new_action
			#update the animation settings
			self.frame_index = 0 
			self.update_time = pygame.time.get_ticks()


	def check_alive(self):
		if self.health <= 0:
			self.health = 0
			self.speed = 0
			self.alive = False
			self.update_action(3)


	def draw(self):
		screen.blit(pygame.transform.flip(self.image, self.flip, False), self.rect)

class World():
	def __init__(self):
		self.obstacle_list = []

	def process_data(self, data):
		#iterate through each value in level data file
		for y, row in enumerate(data):
			for x, tile in enumerate(row):
				if tile >= 0:
					img = img_list[tile]
					img_rect = img.get_rect()
					img_rect.x = x * TILE_SIZE
					img_rect.y = y * TILE_SIZE
					tile_data = (img, img_rect)
					if tile >= 0 and tile <= 8:
						self.obstacle_list.append(tile_data)
					elif tile >= 9 and tile <= 10:
						water = Water(img, x * TILE_SIZE, y * TILE_SIZE)
						water_group.add(water)
					elif tile >= 11 and tile <= 14:
						decoration = Decoration(img, x * TILE_SIZE, y * TILE_SIZE)
						decoration_group.add(decoration)
					elif tile == 15: #create player
						player = Soldier(x * TILE_SIZE, y * TILE_SIZE, 0.3, 'player', 5, 20)
						health_bar = HealthBar(10, 10, player.health, player.health)
					elif tile == 16: #create enemy
					 	enemy = Soldier(x * TILE_SIZE, y * TILE_SIZE, 0.3, 'enemy', 2, 20)
					 	enemy_group.add(enemy)
					elif tile == 17: #create ammo box
						item_box = ItemBox('Ammo', x * TILE_SIZE, y * TILE_SIZE)
						item_box_group.add(item_box)
					elif tile == 18:
						item_box = ItemBox('Ammo', x * TILE_SIZE, y * TILE_SIZE)
						item_box_group.add(item_box)
					elif tile == 19:
						item_box = ItemBox('Health', x * TILE_SIZE, y * TILE_SIZE)
						item_box_group.add(item_box)
					elif tile == 20: #create exit
						exit = Exit(img, x * TILE_SIZE, y * TILE_SIZE)
						exit_group.add(exit)

		return player, health_bar

	def draw(self):
		for tile in self.obstacle_list:
			tile[1][0] += screen_scroll
			screen.blit(tile[0], tile[1])

class Decoration(pygame.sprite.Sprite):
	def __init__(self, img, x, y):
		pygame.sprite.Sprite.__init__(self)
		self.image = img
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

	def update(self):
		self.rect.x += screen_scroll

class Water(pygame.sprite.Sprite):
	def __init__(self, img, x, y):
		pygame.sprite.Sprite.__init__(self)
		self.image = img
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

	def update(self):
		self.rect.x += screen_scroll

class Exit(pygame.sprite.Sprite):
	def __init__(self, img, x, y):
		pygame.sprite.Sprite.__init__(self)
		self.image = img
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

	def update(self):
		self.rect.x += screen_scroll

class ItemBox(pygame.sprite.Sprite):
	def __init__(self, item_type, x, y):
		pygame.sprite.Sprite.__init__(self)
		self.item_type = item_type
		self.image = item_boxes[self.item_type]
		self.rect = self.image.get_rect()
		self.rect.midtop = (x + TILE_SIZE // 2, y + (TILE_SIZE - self.image.get_height()))

	def update(self):
		#scroll
		self.rect.x += screen_scroll
		#check if the player has picked up the box
		if pygame.sprite.collide_rect(self, player):
			#check what kind of box it was
			if self.item_type == 'Health':
				player.health += 25
				if player.health > player.max_health:
					player.health = player.max_health
			elif self.item_type == 'Ammo':
				player.ammo += 15
			#delete the item box
			self.kill()


class HealthBar():
	def __init__(self, x, y, health, max_health):
		self.x = x  
		self.y = y  
		self.health = health
		self.max_health = max_health

	def draw(self, health):
		#update with new health
		self.health = health
		#calculate health ratio
		ratio = self.health / self.max_health
		pygame.draw.rect(screen, BLACK, (self.x - 2, self.y - 2, 154, 24))
		pygame.draw.rect(screen, RED, (self.x, self.y, 150, 20))
		pygame.draw.rect(screen, GREEN, (self.x, self.y, 150 * ratio, 20))


class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y, direction, owner):
        pygame.sprite.Sprite.__init__(self)
        self.speed = 10
        self.image = bullet_img
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.direction = direction
        self.owner = owner  # Track who fired the bullet (player or enemy)

    def update(self):
        # Move the bullet
        self.rect.x += (self.direction * self.speed) + screen_scroll

        # Check if the bullet has gone off screen
        if self.rect.right < 0 or self.rect.left > SCREEN_WIDTH:
            self.kill()

        # Check collision with level
        for tile in world.obstacle_list:
            if tile[1].colliderect(self.rect):
                self.kill()

        # Check collision with characters
        if self.owner == "player":
            # Bullet fired by player should not hit the player
            for enemy in enemy_group:
                if pygame.sprite.collide_rect(self, enemy) and enemy.alive:
                    enemy.health -= 25
                    self.kill()
        elif self.owner == "enemy":
            # Bullet fired by enemy should not hit other enemies
            if pygame.sprite.collide_rect(self, player) and player.alive:
                player.health -= 5
                self.kill()

class ScreenFade():
	def __init__(self, direction, colour, speed):
		self.direction = direction
		self.colour = colour
		self.speed = speed 
		self.fade_counter = 0 

	def fade(self):
		fade_complete = False
		self.fade_counter += self.speed
		if self.direction == 1: #whole screen fade
			pygame.draw.rect(screen, self.colour, (0 - self.fade_counter, 0, SCREEN_WIDTH // 2, SCREEN_HEIGHT))
			pygame.draw.rect(screen, self.colour, (SCREEN_WIDTH // 2 + self.fade_counter, 0, SCREEN_WIDTH, SCREEN_HEIGHT))
			pygame.draw.rect(screen, self.colour, (0, 0 - self.fade_counter, SCREEN_WIDTH, SCREEN_HEIGHT // 2))
			pygame.draw.rect(screen, self.colour, (0, SCREEN_HEIGHT // 2 + self.fade_counter, SCREEN_WIDTH, SCREEN_HEIGHT))

		if self.direction == 2: #vertical screen fade down
			pygame.draw.rect(screen, self.colour, (0, 0, SCREEN_WIDTH, 0 + self.fade_counter))
		if self.fade_counter >= SCREEN_WIDTH:
			fade_complete = True

		return fade_complete
			
#create screen Fades
intro_fade = ScreenFade(1, BLACK, 4)
death_fade = ScreenFade(2, BLACK, 4)

#create sprite groups
enemy_group = pygame.sprite.Group()
bullet_group = pygame.sprite.Group()
item_box_group = pygame.sprite.Group()
decoration_group = pygame.sprite.Group()
water_group = pygame.sprite.Group()
exit_group = pygame.sprite.Group()

# Define button positions and sizes
button_width = 200
button_height = 50
button_x = (SCREEN_WIDTH - button_width) // 2  # Center buttons horizontally
button_y_start = (SCREEN_HEIGHT - (button_height * 3 + 20)) // 2  # Start button Y position
button_y_quit = button_y_start + button_height + 10  # Quit button Y position
button_y_lang = button_y_quit + button_height + 10  # Language button Y position

# Create buttons
start_button = Button(
    text=translations.get("start", "Start"),
    x=button_x,
    y=button_y_start,
    width=button_width,
    height=button_height,
    color=BUTTON_COLOR,
    hover_color=HOVER_COLOR,
    action=start_game,
    is_arabic=(current_language == "ar")  # Set is_arabic based on current language
)

quit_button = Button(
    text=translations.get("quit", "Quit"),
    x=button_x,
    y=button_y_quit,
    width=button_width,
    height=button_height,
    color=BUTTON_COLOR,
    hover_color=HOVER_COLOR,
    action=quit_game,
    is_arabic=(current_language == "ar")
)

lang_button = Button(
    text=translations.get("language", "Language"),
    x=button_x,
    y=button_y_lang,
    width=button_width,
    height=button_height,
    color=BUTTON_COLOR,
    hover_color=HOVER_COLOR,
    action=toggle_language,
    is_arabic=(current_language == "ar")
)



#create empty tile list
world_data = []
for row in range(ROWS):
	r = [-1] * COLS
	world_data.append(r)
#load level data and create world
with open(f'level{level}_data.csv', newline='') as csvfile:
	reader = csv.reader(csvfile, delimiter=',')
	for x, row in enumerate(reader):
		for y, tile in enumerate (row):
			world_data[x][y] = int(tile)


world = World()
player, health_bar = world.process_data(world_data)


run = True
while run:
    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        # Handle menu state (buttons are active only in MENU state)
        if game_state == MENU:
            # Handle menu button clicks
            if event.type == pygame.MOUSEBUTTONDOWN:
                start_button.is_clicked(event)
                quit_button.is_clicked(event)
                lang_button.is_clicked(event)  # Handle language toggle button

            # Toggle language on key press (e.g., 'L' key)
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_l:  # Press 'L' to toggle language
                    current_language = "en" if current_language == "ar" else "ar"
                    translations = load_translations(current_language)
                    # Update button text dynamically
                    start_button.text = translations.get("start", "Start")
                    quit_button.text = translations.get("quit", "Quit")
                    lang_button.text = translations.get("language", "Language")

        # Handle in-game actions (after "Start Game" button is clicked)
        elif game_state == PLAYING:
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_a:
                    moving_left = True
                if event.key == pygame.K_d:
                    moving_right = True
                if event.key == pygame.K_SPACE:
                    shoot = True
                if event.key == pygame.K_w and player.alive:
                    player.jump = True
                    jump_fx.play()
                if event.key == pygame.K_ESCAPE:
                    run = False
                if event.key == pygame.K_p:
                    game_paused = True

            if event.type == pygame.KEYUP:
                if event.key == pygame.K_a:
                    moving_left = False
                if event.key == pygame.K_d:
                    moving_right = False
                if event.key == pygame.K_SPACE:
                    shoot = False

            # Check if restart button is clicked after player death
            if not player.alive and event.type == pygame.MOUSEBUTTONDOWN:
                restart_button.is_clicked(event)
                quit_button.is_clicked(event)

    # Drawing
    if game_state == MENU:
        # Show menu (buttons only)
        screen.fill(BLACK)
        start_button.draw(screen)  # Draw start button
        quit_button.draw(screen)   # Draw quit button
        lang_button.draw(screen)  # Draw language toggle button

    elif game_state == PLAYING:
        # Game world rendering (after Start Game is clicked)
        screen.fill(BLACK)
        clock.tick(FPS)

        # Update and draw background
        draw_bg()

        # Draw world map
        world.draw()

        # Show player health
        health_bar.draw(player.health)

        # Show ammo
        ammo_text = translations.get("ammo", "AMMO")  # Use translated text for ammo
        draw_text(f'{ammo_text}: ', font, WHITE, 10, 35)
        for x in range(player.ammo):
            screen.blit(bullet_img, (90 + (x * 10), 40))

        # Update player and draw player
        player.update()
        player.draw()

        # Handle enemies
        for enemy in enemy_group:
            enemy.ai()
            enemy.update()
            enemy.draw()

        # Update and draw groups
        bullet_group.update()
        item_box_group.update()
        decoration_group.update()
        water_group.update()
        exit_group.update()
        bullet_group.draw(screen)
        item_box_group.draw(screen)
        decoration_group.draw(screen)
        water_group.draw(screen)
        exit_group.draw(screen)

        if start_intro == True:
            if intro_fade.fade():
                start_intro = False
                intro_fade.fade_counter = 0

        # Player actions (shooting, movement, etc.)
        if player.alive:
            if shoot:
                player.shoot()
            if player.in_air:
                player.update_action(2)  # Jump action
            elif moving_left or moving_right:
                player.update_action(1)  # Run action
            else:
                player.update_action(0)  # Idle action

            # Handle player movement
            screen_scroll = player.move(moving_left, moving_right)

        else:
            # When player is dead, show the restart button and quit button
            if death_fade.fade():
                # Draw restart button
                restart_button.draw(screen)

                # Draw quit button
                quit_button.draw(screen)

                # Check if restart button is clicked
                if restart_button.is_clicked():
                    # Reset game state and world
                    game_state = MENU  # Switch to menu or reset the game to playing state
                    player.alive = True  # Make the player alive again

                    # Reset all game entities (enemies, items, etc.)
                    enemy_group.empty()
                    item_box_group.empty()
                    decoration_group.empty()
                    water_group.empty()
                    exit_group.empty()

                    # Load new level data
                    world_data = reset_level()  # Reset level data (ensure this method works)
                    with open(f'level{level}_data.csv', newline='') as csvfile:
                        reader = csv.reader(csvfile, delimiter=',')
                        for x, row in enumerate(reader):
                            for y, tile in enumerate(row):
                                world_data[x][y] = int(tile)

                    # Reinitialize world and player with new data
                    world = World()
                    player, health_bar = world.process_data(world_data)

                    # Ensure the groups are populated again
                    for y, row in enumerate(world_data):
                        for x, tile in enumerate(row):
                            if tile == 16:  # Enemy tile example
                                enemy = Soldier(x * TILE_SIZE, y * TILE_SIZE, 0.3, 'enemy', 2, 20)
                                enemy_group.add(enemy)
                            elif tile == 17:  # Item box tile example
                                item_box = ItemBox('Ammo', x * TILE_SIZE, y * TILE_SIZE)
                                item_box_group.add(item_box)
                            elif tile == 18:  # Health item box tile example
                                item_box = ItemBox('Health', x * TILE_SIZE, y * TILE_SIZE)
                                item_box_group.add(item_box)
                            elif tile == 11 or tile == 12 or tile == 13 or tile == 14:  # Decoration tiles
                                decoration = Decoration(img_list[tile], x * TILE_SIZE, y * TILE_SIZE)
                                decoration_group.add(decoration)
                            elif tile == 9 or tile == 10:  # Water tiles
                                water = Water(img_list[tile], x * TILE_SIZE, y * TILE_SIZE)
                                water_group.add(water)
                            elif tile == 20:  # Exit tile
                                exit = Exit(img_list[tile], x * TILE_SIZE, y * TILE_SIZE)
                                exit_group.add(exit)

                    # Reset necessary values and set the player as alive again
                    player.alive = True
                    death_fade.fade_counter = 0  # Reset fade counter after restart
                    break  # Exit the loop to restart the game

    pygame.display.update()
